{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Basic Neural Analysis of Steinmetz Dataset\n",
    "\n",
    "This notebook performs basic analyses of neural activity including:\n",
    "1. PSTH analysis aligned to stimulus and choice\n",
    "2. Comparison of neural responses across brain regions\n",
    "3. Analysis of fast-spiking vs regular-spiking neurons\n",
    "4. Trial-to-trial variability analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "import sys\n",
    "sys.path.append('../src')\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from data_loader import SteinmetzDataLoader\n",
    "from neural_analysis import NeuralAnalyzer\n",
    "\n",
    "# Set plotting style\n",
    "plt.style.use('seaborn')\n",
    "sns.set_context(\"talk\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Data Loading and Setup"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Initialize data loader and load session\n",
    "loader = SteinmetzDataLoader()\n",
    "loader.download_data()\n",
    "session_data = loader.load_session(11)  # Using session 11 as an example\n",
    "\n",
    "# Initialize neural analyzer\n",
    "analyzer = NeuralAnalyzer()\n",
    "\n",
    "print(\"Available data keys:\", session_data.keys())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. PSTH Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "def plot_psth_multiple_neurons(spikes, neuron_indices, time_window=(-0.5, 0.5)):\n",
    "    \"\"\"Plot PSTHs for multiple neurons.\"\"\"\n",
    "    n_neurons = len(neuron_indices)\n",
    "    fig, axes = plt.subplots(n_neurons, 1, figsize=(12, 4*n_neurons))\n",
    "    \n",
    "    for i, neuron_idx in enumerate(neuron_indices):\n",
    "        psth, time_bins = analyzer.compute_psth(\n",
    "            spikes[neuron_idx],\n",
    "            time_window=time_window\n",
    "        )\n",
    "        \n",
    "        if n_neurons == 1:\n",
    "            ax = axes\n",
    "        else:\n",
    "            ax = axes[i]\n",
    "            \n",
    "        ax.plot(time_bins, psth)\n",
    "        ax.axvline(x=0, color='r', linestyle='--', alpha=0.5)\n",
    "        ax.set_xlabel('Time from stimulus onset (s)')\n",
    "        ax.set_ylabel('Firing rate (Hz)')\n",
    "        ax.set_title(f'Neuron {neuron_idx}')\n",
    "    \n",
    "    plt.tight_layout()\n",
    "    return fig\n",
    "\n",
    "# Plot PSTHs for first few neurons\n",
    "example_neurons = [0, 1, 2]\n",
    "plot_psth_multiple_neurons(session_data['spikes'], example_neurons)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Neuron Type Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "# Identify fast-spiking neurons\n",
    "is_fast_spiking = loader.get_fast_spiking_neurons(session_data)\n",
    "\n",
    "# Compute average firing rates\n",
    "time_bins = np.arange(-0.5, 0.5, 0.01)\n",
    "firing_rates = loader.compute_firing_rates(session_data['spikes'], time_bins)\n",
    "mean_rates = np.mean(firing_rates, axis=1)\n",
    "\n",
    "# Plot firing rate distributions by neuron type\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(mean_rates[is_fast_spiking], bins=20, alpha=0.5, label='Fast-spiking')\n",
    "plt.hist(mean_rates[~is_fast_spiking], bins=20, alpha=0.5, label='Regular-spiking')\n",
    "plt.xlabel('Mean firing rate (Hz)')\n",
    "plt.ylabel('Number of neurons')\n",
    "plt.title('Firing Rate Distribution by Neuron Type')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Trial-to-Trial Variability"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "def compute_fano_factor(spike_counts):\n",
    "    \"\"\"Compute Fano factor (variance/mean) across trials.\"\"\"\n",
    "    return np.var(spike_counts, axis=1) / np.mean(spike_counts, axis=1)\n",
    "\n",
    "# Compute spike counts in response window\n",
    "window = (0, 0.2)  # 200ms after stimulus\n",
    "n_neurons = len(session_data['spikes'])\n",
    "n_trials = len(session_data['spikes'][0])\n",
    "spike_counts = np.zeros((n_neurons, n_trials))\n",
    "\n",
    "for i, neuron_spikes in enumerate(session_data['spikes']):\n",
    "    for j, trial_spikes in enumerate(neuron_spikes):\n",
    "        spike_counts[i, j] = np.sum(\n",
    "            (trial_spikes >= window[0]) & (trial_spikes < window[1])\n",
    "        )\n",
    "\n",
    "# Compute and plot Fano factors\n",
    "fano_factors = compute_fano_factor(spike_counts)\n",
    "\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(fano_factors, bins=30)\n",
    "plt.axvline(x=1, color='r', linestyle='--', label='Poisson')\n",
    "plt.xlabel('Fano Factor')\n",
    "plt.ylabel('Number of neurons')\n",
    "plt.title('Distribution of Fano Factors')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Response Reliability Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "source": [
    "def compute_response_reliability(firing_rates):\n",
    "    \"\"\"Compute trial-to-trial correlation of firing patterns.\"\"\"\n",
    "    n_neurons = firing_rates.shape[0]\n",
    "    reliability = np.zeros(n_neurons)\n",
    "    \n",
    "    for i in range(n_neurons):\n",
    "        # Split trials into two groups and compare\n",
    "        n_trials = firing_rates.shape[1]\n",
    "        split = n_trials // 2\n",
    "        mean1 = np.mean(firing_rates[i, :split], axis=0)\n",
    "        mean2 = np.mean(firing_rates[i, split:], axis=0)\n",
    "        reliability[i] = np.corrcoef(mean1, mean2)[0, 1]\n",
    "    \n",
    "    return reliability\n",
    "\n",
    "# Compute response reliability\n",
    "reliability = compute_response_reliability(firing_rates)\n",
    "\n",
    "# Plot reliability distribution\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.hist(reliability[~np.isnan(reliability)], bins=30)\n",
    "plt.xlabel('Response Reliability')\n",
    "plt.ylabel('Number of neurons')\n",
    "plt.title('Distribution of Response Reliability')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}